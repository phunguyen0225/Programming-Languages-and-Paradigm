Assign1: Due 11:59PM CT September 23

***Please review the top part of ../hw1/hw1.txt***
***Your chance of success greatly increases if you start very early. Your chance of failure increases if you start late. Please use as many reviews as you possibly can.***

For this assignment we will use three different languages. One has to be a statically typed language. One has to be a dynamically typed language. A third is your choice. Do not pick two languages that are too similar to each other. Please drop an email to Venkat to check if your language choices are OK before you invest too much time into any of them.

Create files using proper extensions. Also create either a build file or a sh file that will compile (if necessary) and run your code to display the output or show test results automatically.

If you need help with any of the steps, please ask. You do not have to fight with tools or code for a long time. The purpose of this course is to learn. If you're stuck, then ask for help and it will be given. If you start early, you will be able to make much better progress than if you start late.

Please time box your efforts. Spend at most an hour on a problem, if you can't find a working solution, then ask for help.

In each of the languages, create two implementations for a function that will tell whether a number, given as argument, is a perfect number or not.

A perfect number is a number greater than 1 whose factors total to twice the number. For example, the factors of 6 are 1, 2, 3, and 6. The total of these values is 12 which is twice the given number 6.

The first implementation, in each language, should be in imperative style. The second implementation, in each language, should be in functional style.

Suggestion: Start with one language. Write the code in that language, evolve it using reviews. Once you've completed code in one language and gotten a satisfactory review, then create in second language. Once that's completed, proceed to the third language.

After completing the coding (and only after that), answer the following questions:

1. Discuss some of the things you have learned from working on this assignment.

    In this assignment, we have learned that functional style is way easier to understand. Even though it's a little more thinking and researching if the language you're using support functional style, it's worth the time because it's easier to understand and debug. 
    We learned that even when the style doesn't support the functional style you can still write functional code, it just requires a bit of setup on your part. 
    We learn that when a language supports the functional style it can make the code base very concise but when it doesn't it may take a bit of work to make the code more readable. We also that the functional style doesn't always make the code more concise, sometimes you have to make helper functions to make the code more readable Looking at the two styles the functional style doesn't require as more brain power to understand what the code is doing since the functions describe what the code is doing. The imperative style requires more brain power to understand since we have to read the code and figure out what the code is actually doing. The imperative style requires more attention to details in order to do right. When debugging our sum of factors function in Java we had to make sure that <= was not <, we had missed this when we were creating the function at first. Where as with the functional style we didn't have to worry about that since the function itself describes what it's doing. 

2. Were there any thing that surprised you or things that you did not expect.

    One thing that surprised us is that Go did not have built-in assert functions unlike Java, and Python. We had to write our own assert function to make the code more readable.
    Another surprising thing was the type of inference in GO. Even though it's a statically typed language, its syntax is more like Python than it is Java.
    

3. Given this experience, draw a comparison between the imperative style and the functional style.

    The imperative style is more about telling the computer what to do while the functional style is describing what you want the computer to do.
    The imperative style feels like its treating the computer as a baby, while the functional style is treating the computer as an adult.
    Also the imperative style is more tend to error prone because you are accessing and changing the value, while functional style is a one way trip, there is no accessing and changing the value.


4. Given this experience, draw a comparison between static typing and dynamic typing.

    Variables of statically-typed languages are checked at compile-time and variables for dynamic typing are checked at run-time. When we did the assignment in Java, we have the benefit of compilation check if we pass in the wrong type to a function. 
    For a dynamically-typed language like Python, we have less verbosity. Whenever we change one of the tests, we don't have to wait for the compiler to finish before running it, we can just check it at run-time.

5. Of the three languages that you used, what are your impressions about each, their strengths, weaknesses, your likes/dislikes.
    Of the the three languages Java was the most familiar to us. We have used it in the past and we have a good understanding of it. We like that it has a lot of built-in functionality and it's very easy to use. We liked the Unit testing that it has, which was very informative and readable. Python is also a language we are already very familiar with. It was really easy to write and understand the functional code. It was also very easy to write the unit test as it was very straightforward. The only thing we didn't like about Python is that tests require you to start with the test which could lead to confusion if you forget. 
    Go was not a language we were familiar with. We were impressed with the type inference system. The type inference made the syntax very concise and easy to read. Though there were a couple things we didn't like about Go, like how it doesn't have built-in test functionality. We had to create our own asserts for testing. We didn't like that Go has little to no support for the functional style, we had to install a functional library to make it work. However, the act of installing the library was very straightforward and easy to do. This was pleasantly surprising. GO has the same problem as python where you have to start with the test which could lead to confusion if you forget.

    

Total[100]: 100

Language 1 [30]: 
build file and tests [5]:
imperative style [5]:
functional style with no mutation [10]:
code quality [10]:

Language 1 [30]: 
build file and tests [5]:
imperative style [5]:
functional style with no mutation [10]:
code quality [10]:

Language 1 [30]: 
build file and tests [5]:
imperative style [5]:
functional style with no mutation [10]:
code quality [10]:

Response to questions [10]:

